############################################################
#
# Author: Dmitry Gromov
# Date: 2021-05-24
# Description: homework3
#
############################################################

def div_one_by_another(num_one, num_two):
    """ Функция делит первый параметр на второй

        Функция делит первый параметр на второй (с проверкой деления на ноль),
        и выводит результат
    """
    try:
        return print("Результат деления чисел:", num_one / num_two)
    except ZeroDivisionError as e:
        print(f"Делить на 0 - нельзя!!!")


def print_user_data(**kwargs):
    """Вывод входных параметров одной строкой

       Процедура выводит переданные параметры одной строкой.
       Используется в задаче№2
    """
    output_str = ""
    for key, value in kwargs.items():
        output_str = output_str + key + ": " + value + "; "
    print(f"\nРезультат выполнения:\n", output_str)


def my_func_free(a: int, b: int , c: int):
    if(a < b and a < c):
        return b + c
    elif(b < a and b < c):
        return a + c
    else:
        return a + b


def my_func_four(a: float, b: int):
    """ Возводим значение первого параметра в степень значения второго"""

    # первый способ: **
    result = a ** b
    print(f"Первый способ (**): ", result)


    # второй способ: цикл 'for'
    result = a
    for i in range(1, abs(b)):
        result *= a
    result = 1 / result
    print(f"Второй способ (цикл 'for'): ", result)


def task_five(*args):
    """ Суммируем ряд цифр

    Функция суммирует ряд цифр до попадания на не число и возвращает полученное значение
    в виде кортежа, где первый элемент это сумма, а второй True - если ряд содержит толко числа,
    False - если ряд содержит не цифру. В этом случае сразу прерываемся и возвращаем то что получили
    к этому моменту
    """
    current_sum = 0
    num_row = list(*args)
    for num in num_row:
        # Если \'пробел\', то продолжаем
        if(num == ' '):
            continue
        if(num.isdigit()):
            current_sum +=int(num)
        else:
            # Выходим, так как это не число
            return (current_sum, False)
    # Выходим в любом случае
    return (current_sum, True)



def int_func(text: str):
    """ Функция возвращает переданное слово с заглавной первой буквой"""
    return str.capitalize(str.strip(text))




# Press the green button in the gutter to run the script.
if __name__ == '__main__':

#############################################################################################################
    # """ 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
    #     Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль."""
    #
    # a = float(input("Введите первое число: "))
    # b = float(input("Введите второе число: "))
    # div_one_by_another(a, b)


# ##############################################################################################################
#     """ 2. Реализовать функцию, принимающую несколько параметров,
#     описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон.
#     Функция должна принимать параметры как именованные аргументы.
#     Реализовать вывод данных о пользователе одной строкой."""
#
#     first_name = input("Укажите имя пользователя: ")
#     last_name = input("Укажите фамилию пользователя: ")
#     birth_year = input("Укажите дату рождения пользователя: ")
#     location = input("Укажите место проживания пользователя: ")
#     email = input("Укажите email: ")
#     phone = input("Укажите телефон: ")
#
#     # Вызываем функцию и передаем её именованные параметры
#     print_user_data(имя=first_name, фамилия=last_name, год_рождения=birth_year, город_проживания=location, email=email,
#                     телефон=phone)
#

##########################################################################################################
    # """ 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента,
    # и возвращает сумму наибольших двух аргументов."""
    #
    # a = int(input("Укажите первый аргумент: "))
    # b = int(input("Укажите второй аргумент: "))
    # c = int(input("Укажите третий аргумент: "))
    # print("Сумма наибольших чисел:", my_func_free(a, b, c))
    #
###########################################################################################################
    # """ 4. Программа принимает действительное положительное число x и целое отрицательное число y.
    # Необходимо выполнить возведение числа x в степень y.
    # Задание необходимо реализовать в виде функции my_func(x, y).
    # При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
    # Подсказка: попробуйте решить задачу двумя способами.
    # Первый — возведение в степень с помощью оператора **.
    # Второй — более сложная реализация без оператора **, предусматривающая использование цикла."""

    # a = float(input("Укажите значение первого параметра (вещественное число):"))
    # b = int(input("Укажите значение второго параметра (целое, отрицательное число):"))
    #
    # if(b >= 0):
    #     print("Второй параметр должен быть целым, отрицательным числом. Отмена!")
    # else:
    #     my_func_four(a, b)

########################################################################################################
    # """ 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
    # При нажатии Enter должна выводиться сумма чисел.
    # Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
    # Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
    # Но если вместо числа вводится специальный символ, выполнение программы завершается.
    # Если специальный символ введен после нескольких чисел,
    # то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу."""

    # total = 0 #Здесь будет накопитель суммы чисел
    # ret_tuple = (0, True) # корте
    # while(True):
    #     number_list = input("Введите ряд чисел: ")
    #     ret_tuple = task_five(number_list)
    #     total += ret_tuple[0]
    #     print('Текущая сумма чисел:', total)
    #     if(not ret_tuple[1]):
    #         break
    # print('Накопленная сумма чисел:', total)



###################################################################################################################
    # """ 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же,
    # но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
    # Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
    # Каждое слово состоит из латинских букв в нижнем регистре.
    # Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
    # Необходимо использовать написанную ранее функцию int_func()."""
    #
    # some_word = input("Введите любое слово: ")
    # print(f"Введенное слово с заглавной первой буквой: ", int_func(some_word))
    #
    # some_string = input("Введите строку из нескольких слов:")
    # word_list = str.split(some_string)
    # result = ""
    #
    # for word in word_list:
    #     result = result + int_func(word) + " "
    # print(f"Результат-\'откапитализированная\' строка:", str.strip(result))


# See PyCharm help at https://www.jetbrains.com/help/pycharm/
